{"version":3,"sources":["Containers/Main/Main.module.css","App.module.css","Components/WeatherNow/WeatherNow.module.css","store/reducers/mainReducer.js","store/actions/actionTypes.js","Components/WeatherNow/WeatherNow.js","Containers/Main/Main.js","store/actions/mainAction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","longitude","latitude","data","mainReducer","state","action","type","WeatherNow","props","className","classes","cityName","TempratureNow","size","style","marginTop","temp","weatherDescription","WeatherNowTable","div1","feelsLike","div2","precipitation","div3","sunrise","div4","windSpeed","div5","humidity","div6","sunset","Main","getGeolocation","position","console","log","coords","onGeolocation","onCurrentWeather","navigator","geolocation","getCurrentPosition","this","map","element","toFixed","countryCode","country_code","city_name","weather","description","app_temp","wind_spd","precip","rh","Component","connect","dispatch","actions","lon","lat","axios","post","then","response","currentWeatherSuccess","App","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45cad567.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Main_Main__28NuB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Dmms\",\"App-logo\":\"App_App-logo__2BY3Z\",\"App-logo-spin\":\"App_App-logo-spin__4iuz0\",\"App-header\":\"App_App-header__2FmyO\",\"App-link\":\"App_App-link__L6w02\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherNow\":\"WeatherNow_WeatherNow__1Odj_\",\"TempratureNow\":\"WeatherNow_TempratureNow__3ThcM\",\"WeatherNowTable\":\"WeatherNow_WeatherNowTable__2CXqM\",\"div1\":\"WeatherNow_div1__1zm7_\",\"div2\":\"WeatherNow_div2__Wnsq6\",\"div3\":\"WeatherNow_div3__p-Z1U\",\"div4\":\"WeatherNow_div4__YIKcz\",\"div5\":\"WeatherNow_div5__1W2ke\",\"div6\":\"WeatherNow_div6__2zI6d\"};","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    longitude: null,\r\n    latitude: null,\r\n    data: [],\r\n}; \r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        case actionTypes.GEOLOCATION:\r\n            return {\r\n                ...state,\r\n                longitude: action.longitude,\r\n                latitude: action.latitude\r\n            }\r\n        case actionTypes.CURRENT_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default mainReducer;","export const GEOLOCATION = 'GEOLOCATION';\r\n\r\nexport const CURRENT_WEATHER_SUCCESS = 'CURRENT_WEATHER_SUCCESS';\r\n","import React from 'react';\r\nimport { WiCloudy } from 'weather-icons-react';\r\n\r\nimport classes from './WeatherNow.module.css'\r\n\r\n\r\nconst WeatherNow = (props) =>{\r\n        return (            \r\n                <div className={classes.WeatherNow}>\r\n                    <h2>{props.cityName}, GB</h2>\r\n                    <h4>Friday 3 april</h4>\r\n                    <div className={classes.TempratureNow}>\r\n                        <WiCloudy size={180}/>\r\n                        <div style={{\r\n                            marginTop: '35px'\r\n                        }}>{props.temp} ° <p>{props.weatherDescription}</p></div>\r\n                    </div>\r\n                    <div className={classes.WeatherNowTable}>\r\n                        <div className={classes.div1}>{props.feelsLike} ° <br/>  Feels Likes</div>\r\n                        <div className={classes.div2}>{props.precipitation} cm <br/> Precipitation </div>\r\n                        <div className={classes.div3}>{props.sunrise} <br/> Sunrise time</div>\r\n                        <div className={classes.div4}>{props.windSpeed} m/s<br/>Wind speed</div>\r\n                        <div className={classes.div5}>{props.humidity} % <br/> humidity</div>\r\n                        <div className={classes.div6}>{props.sunset} <br/>Sunset time</div>\r\n                    </div>\r\n\r\n                </div>\r\n        )\r\n}\r\n\r\n\r\n\r\nexport default WeatherNow;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport classes from './Main.module.css';\r\nimport * as actions from '../../store/actions/indexActions';\r\nimport WeatherNow from '../../Components/WeatherNow/WeatherNow'\r\n\r\nclass Main extends Component {\r\n\r\n    componentDidMount() {\r\n        if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(this.getGeolocation);          \r\n        }\r\n    }\r\n\r\n\r\n\r\n    getGeolocation = (position) => {  \r\n        console.log(position.coords.latitude, position.coords.longitude);\r\n        this.props.onGeolocation(position.coords.longitude, position.coords.latitude)  \r\n        this.props.onCurrentWeather(this.props.longitude, this.props.latitude)      \r\n      }\r\n\r\n    render() {        \r\n        \r\n        return (\r\n            <div className={classes.Main}>\r\n                <h1>Weather App</h1>\r\n                <WeatherNow\r\n                temp={\r\n                    this.props.data.map( element => {\r\n                        return element.temp.toFixed(0)\r\n                })}\r\n                countryCode={\r\n                    this.props.data.map( element => {\r\n                        return element.country_code\r\n                })}\r\n                cityName={\r\n                    this.props.data.map( element => {\r\n                        return element.city_name\r\n                })}\r\n                weatherDescription={\r\n                    this.props.data.map( element => {\r\n                    return element.weather.description\r\n                 })}\r\n                 feelsLike={\r\n                    this.props.data.map( element => {\r\n                    return element.app_temp.toFixed(0)\r\n                 })}\r\n                 windSpeed={\r\n                    this.props.data.map( element => {\r\n                    return element.wind_spd\r\n                 })}\r\n                 precipitation={\r\n                     this.props.data.map( element => {\r\n                         return element.precip\r\n                 })}\r\n                 humidity={\r\n                    this.props.data.map( element => {\r\n                        return element.rh\r\n                 })}\r\n                 sunrise={\r\n                    this.props.data.map( element => {\r\n                        return element.sunrise\r\n                 })}\r\n                 sunset={\r\n                    this.props.data.map( element => {\r\n                        return element.sunset\r\n                 })}\r\n                 \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        longitude: state.longitude,\r\n        latitude: state.latitude,\r\n        data: state.data\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onGeolocation: (longitude, latitude) => dispatch(actions.geolocation(longitude, latitude)),\r\n        onCurrentWeather: (longitude, latitude) => dispatch(actions.currentWeather(longitude, latitude))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios'\r\n\r\nexport const currentWeatherSuccess = (data) => {\r\n    return {\r\n        type:actionTypes.CURRENT_WEATHER_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const currentWeather = (longitude, latitude) => {\r\n    return dispatch => {\r\n        const lon = longitude;\r\n        const lat = latitude;\r\n        axios.post(`https://api.weatherbit.io/v2.0/current?lat=${lat}&lon=${lon}&key=3fab93ee25494833b253c5e6e3eff0a3`)\r\n        .then( response => {\r\n                //const data = response.data.data.map( element => {\r\n                  //  return element.temp  \r\n                //})\r\n                const  data = response.data.data\r\n                console.log('RESPOSE DATA ',data);\r\n                dispatch(currentWeatherSuccess(data));\r\n            }\r\n        )\r\n    };\r\n}\r\n\r\nexport const geolocation = (longitude, latitude) => {\r\n    return {\r\n        type: actionTypes.GEOLOCATION,\r\n        longitude: longitude,\r\n        latitude: latitude\r\n    }\r\n}","import React from 'react';\n\nimport Main from './Containers/Main/Main'\nimport classes from'./App.module.css';\n\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider} from 'react-redux';\nimport thunk from 'redux-thunk'\n\nimport mainReducer from './store/reducers/mainReducer'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(mainReducer,composeEnhancers(applyMiddleware(thunk)))\n\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}